{"version":3,"sources":["webpack:///static/16.be489b92.chunk.js","webpack:///./catalog/popover/variations.md?6944","webpack:///./catalog/popover/variations.md"],"names":["webpackJsonp","2047","module","exports","__webpack_require__","React","createReactClass","PageRenderer","__esModule","default","WrappedPageRenderer","displayName","getInitialState","content","componentWillMount","render","createElement","Object","assign","this","props","state","__catalog_loader__","2151"],"mappings":"AAAAA,cAAc,KAERC,KACA,SAAUC,EAAQC,EAASC,GCFjC,GAAAC,GAAAD,EAAA,GACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,KAAAG,YACAA,GAAAC,aACAD,IAAAE,QAEA,IAAAC,GAAAJ,GACAK,YAAA,sBACAC,gBAAA,WACA,OAAgBC,QAAAT,EAAA,QAEhBU,mBAAA,aAUAC,OAAA,WACA,MAAAV,GAAAW,cAAAT,EAAAU,OAAAC,UAAiEC,KAAAC,OAAeP,QAAAM,KAAAE,MAAAR,aAGhFH,GAAAY,oBAAA,EACApB,EAAAC,QAAAO,GDUMa,KACA,SAAUrB,EAAQC,GEtCxBD,EAAAC,QAAA","file":"static/16.be489b92.chunk.js","sourcesContent":["webpackJsonp([16],{\n\n/***/ 2047:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    var React = __webpack_require__(0);\n    var createReactClass = __webpack_require__(90);\n    var PageRenderer = __webpack_require__(445).PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: __webpack_require__(2151)};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (false) {\n          module.hot.accept(\"!!../../node_modules/raw-loader/index.js!./variations.md\", function() {\n            component.setState({\n              content: require(\"!!../../node_modules/raw-loader/index.js!./variations.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n/***/ }),\n\n/***/ 2151:\n/***/ (function(module, exports) {\n\nmodule.exports = \"## Popover\\n\\nonFocusAway should always be used according to the spec.\\n\\n```react\\nshowSource: true\\nstate: { isOpen: false }\\n---\\n<PopoverDemo>\\n\\t<PopoverManager onFocusAway={() => setState({ isOpen: false })}>\\n\\t\\t<PopoverReference>\\n\\t\\t\\t<Button variant=\\\"primary\\\" size=\\\"medium\\\" onClick={() => setState({ isOpen: !state.isOpen })}>Show a Popover!</Button>\\n\\t\\t</PopoverReference>\\n\\t\\t<Popover isOpen={state.isOpen} placement=\\\"top\\\">Hello!</Popover>\\n\\t</PopoverManager>\\n</PopoverDemo>\\n```\\n\\n## PopoverBase\\n\\n```react\\nshowSource: true\\nstate: { isOpen: false }\\n---\\n<PopoverDemo>\\n\\t<PopoverManager onFocusAway={() => setState({ isOpen: false })}>\\n\\t\\t<PopoverReference>\\n\\t\\t\\t<Button variant=\\\"primary\\\" size=\\\"medium\\\" onClick={() => setState({ isOpen: !state.isOpen })}>Show a Popover!</Button>\\n\\t\\t</PopoverReference>\\n\\t\\t<PopoverBase isOpen={state.isOpen} placement=\\\"top\\\">Notice my lack of style!</PopoverBase>\\n\\t</PopoverManager>\\n</PopoverDemo>\\n```\\n\\n## Placement\\n\\n```react\\nshowSource: true\\nstate: { isOpen: false }\\n---\\n<PopoverDemo>\\n\\t<PopoverManager onFocusAway={() => setState({ isOpen: false })}>\\n\\t\\t<PopoverReference>\\n\\t\\t\\t<Button variant=\\\"primary\\\" size=\\\"medium\\\" onClick={() => setState({ isOpen: !state.isOpen })}>Show a Popover!</Button>\\n\\t\\t</PopoverReference>\\n\\t\\t<Popover isOpen={state.isOpen} placement=\\\"top\\\">Hello!</Popover>\\n\\t</PopoverManager>\\n\\t<PopoverManager onFocusAway={() => setState({ isOpen: false })}>\\n\\t\\t<PopoverReference>\\n\\t\\t\\t<Button variant=\\\"primary\\\" size=\\\"medium\\\" onClick={() => setState({ isOpen: !state.isOpen })}>Show a Popover!</Button>\\n\\t\\t</PopoverReference>\\n\\t\\t<Popover isOpen={state.isOpen} placement=\\\"bottom\\\">Hello!</Popover>\\n\\t</PopoverManager>\\n\\t<PopoverManager  onFocusAway={() => setState({ isOpen: false })}>\\n\\t\\t<PopoverReference>\\n\\t\\t\\t<Button variant=\\\"primary\\\" size=\\\"medium\\\" onClick={() => setState({ isOpen: !state.isOpen })}>Show a Popover!</Button>\\n\\t\\t</PopoverReference>\\n\\t\\t<Popover isOpen={state.isOpen} placement=\\\"left\\\">Hello!</Popover>\\n\\t</PopoverManager>\\n\\t<PopoverManager onFocusAway={() => setState({ isOpen: false })}>\\n\\t\\t<PopoverReference>\\n\\t\\t\\t<Button variant=\\\"primary\\\" size=\\\"medium\\\" onClick={() => setState({ isOpen: !state.isOpen })}>Show a Popover!</Button>\\n\\t\\t</PopoverReference>\\n\\t\\t<Popover isOpen={state.isOpen} placement=\\\"right\\\">Hello!</Popover>\\n\\t</PopoverManager>\\n</PopoverDemo>\\n```\\n\\n## Options\\n\\n```react\\nshowSource: true\\nstate: { isOpen: false }\\n---\\n<PopoverDemo>\\n\\t<PopoverManager onFocusAway={() => setState({ isOpen: false })}>\\n\\t\\t<PopoverReference>\\n\\t\\t\\t<Button variant=\\\"primary\\\" size=\\\"medium\\\" onClick={() => setState({ isOpen: !state.isOpen })}>Show a Popover!</Button>\\n\\t\\t</PopoverReference>\\n\\t\\t<Popover isOpen={state.isOpen} placement=\\\"top\\\" theme={{ backgroundColor: '#ebf7ff' }}>Hello!</Popover>\\n\\t</PopoverManager>\\n\\t<PopoverManager onFocusAway={() => setState({ isOpen: false })}>\\n\\t\\t<PopoverReference>\\n\\t\\t\\t<Button variant=\\\"primary\\\" size=\\\"medium\\\" onClick={() => setState({ isOpen: !state.isOpen })}>Show a Popover with zIndex!</Button>\\n\\t\\t</PopoverReference>\\n\\t\\t<Popover isOpen={state.isOpen} placement=\\\"top\\\" styleOverrides={{ padding: '18px', hideShadow: true, width: '200px', border: 'black solid 1px', zIndex: 10 }}>Hello!</Popover>\\n\\t</PopoverManager>\\n\\t<PopoverManager onFocusAway={() => setState({ isOpen: false })}>\\n\\t\\t<PopoverReference>\\n\\t\\t\\t<Button variant=\\\"primary\\\" size=\\\"medium\\\" onClick={() => setState({ isOpen: !state.isOpen })}>Show a Popover!</Button>\\n\\t\\t</PopoverReference>\\n\\t\\t<Popover isOpen={state.isOpen} placement=\\\"top\\\" hideArrow>Hello!</Popover>\\n\\t</PopoverManager>\\n\\t<PopoverManager onFocusAway={() => setState({ isOpen: false })}>\\n\\t\\t<PopoverReference>\\n\\t\\t\\t<Button variant=\\\"primary\\\" size=\\\"medium\\\" onClick={() => setState({ isOpen: !state.isOpen })}>Show a Popover w/ a delay!</Button>\\n\\t\\t</PopoverReference>\\n\\t\\t<Popover isOpen={state.isOpen} placement=\\\"top\\\" delay={{ show: 1000, hide: 1000 }}>Hello!</Popover>\\n\\t</PopoverManager>\\n</PopoverDemo>\\n```\\n\\n## Using container prop\\n\\n```react\\nshowSource: true\\nstate: { isOpen: false }\\n---\\n// overflow: hidden\\n<PopoverOverflowDemo>\\n\\t<PopoverManager onFocusAway={() => setState({ isOpen: false })}>\\n\\t\\t<PopoverReference>\\n\\t\\t\\t<Button variant=\\\"primary\\\" size=\\\"medium\\\" onClick={() => setState({ isOpen: !state.isOpen })}>Show a Popover!</Button>\\n\\t\\t</PopoverReference>\\n\\t\\t<Popover isOpen={state.isOpen} placement=\\\"top\\\">I'm inline</Popover>\\n\\t</PopoverManager>\\n\\t<PopoverManager onFocusAway={() => setState({ isOpen: false })}>\\n\\t\\t<PopoverReference>\\n\\t\\t\\t<Button variant=\\\"primary\\\" size=\\\"medium\\\" onClick={() => setState({ isOpen: !state.isOpen })}>Show a Popover!</Button>\\n\\t\\t</PopoverReference>\\n\\t\\t<Popover isOpen={state.isOpen} placement=\\\"top\\\" container=\\\"body\\\">I'm thinking with portals!</Popover>\\n\\t</PopoverManager>\\n</PopoverOverflowDemo>\\n```\\n\\n## Tooltip\\n\\nAll props for normal popovers are available to tooltips.\\nTooltips will be hidden on mobile.\\n\\n```react\\nshowSource: true\\nstate: { isOpen: false }\\n---\\n<PopoverDemo>\\n\\t<Tooltip content=\\\"Hello!\\\">\\n\\t\\t<Button variant=\\\"primary\\\" size=\\\"medium\\\">Uncontrolled Tooltip</Button>\\n\\t</Tooltip>\\n\\n\\t<Tooltip content=\\\"Hello!\\\" isOpen={state.isOpen}>\\n\\t\\t<Button variant=\\\"primary\\\" size=\\\"medium\\\" onClick={() => setState({ isOpen: !state.isOpen })}>Controlled Tooltip</Button>\\n\\t</Tooltip>\\n\\n\\t<Tooltip content={<StyledDiv>Hello!</StyledDiv>}>\\n\\t\\t<Button variant=\\\"primary\\\" size=\\\"medium\\\">Tooltip with jsx</Button>\\n\\t</Tooltip>\\n</PopoverDemo>\\n```\\n\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/16.be489b92.chunk.js","\n    var React = require('react');\n    var createReactClass = require('create-react-class');\n    var PageRenderer = require('catalog').PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: require(\"!!../../node_modules/raw-loader/index.js!./variations.md\")};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (module.hot) {\n          module.hot.accept(\"!!../../node_modules/raw-loader/index.js!./variations.md\", function() {\n            component.setState({\n              content: require(\"!!../../node_modules/raw-loader/index.js!./variations.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./catalog/popover/variations.md\n// module id = 2047\n// module chunks = 16","module.exports = \"## Popover\\n\\nonFocusAway should always be used according to the spec.\\n\\n```react\\nshowSource: true\\nstate: { isOpen: false }\\n---\\n<PopoverDemo>\\n\\t<PopoverManager onFocusAway={() => setState({ isOpen: false })}>\\n\\t\\t<PopoverReference>\\n\\t\\t\\t<Button variant=\\\"primary\\\" size=\\\"medium\\\" onClick={() => setState({ isOpen: !state.isOpen })}>Show a Popover!</Button>\\n\\t\\t</PopoverReference>\\n\\t\\t<Popover isOpen={state.isOpen} placement=\\\"top\\\">Hello!</Popover>\\n\\t</PopoverManager>\\n</PopoverDemo>\\n```\\n\\n## PopoverBase\\n\\n```react\\nshowSource: true\\nstate: { isOpen: false }\\n---\\n<PopoverDemo>\\n\\t<PopoverManager onFocusAway={() => setState({ isOpen: false })}>\\n\\t\\t<PopoverReference>\\n\\t\\t\\t<Button variant=\\\"primary\\\" size=\\\"medium\\\" onClick={() => setState({ isOpen: !state.isOpen })}>Show a Popover!</Button>\\n\\t\\t</PopoverReference>\\n\\t\\t<PopoverBase isOpen={state.isOpen} placement=\\\"top\\\">Notice my lack of style!</PopoverBase>\\n\\t</PopoverManager>\\n</PopoverDemo>\\n```\\n\\n## Placement\\n\\n```react\\nshowSource: true\\nstate: { isOpen: false }\\n---\\n<PopoverDemo>\\n\\t<PopoverManager onFocusAway={() => setState({ isOpen: false })}>\\n\\t\\t<PopoverReference>\\n\\t\\t\\t<Button variant=\\\"primary\\\" size=\\\"medium\\\" onClick={() => setState({ isOpen: !state.isOpen })}>Show a Popover!</Button>\\n\\t\\t</PopoverReference>\\n\\t\\t<Popover isOpen={state.isOpen} placement=\\\"top\\\">Hello!</Popover>\\n\\t</PopoverManager>\\n\\t<PopoverManager onFocusAway={() => setState({ isOpen: false })}>\\n\\t\\t<PopoverReference>\\n\\t\\t\\t<Button variant=\\\"primary\\\" size=\\\"medium\\\" onClick={() => setState({ isOpen: !state.isOpen })}>Show a Popover!</Button>\\n\\t\\t</PopoverReference>\\n\\t\\t<Popover isOpen={state.isOpen} placement=\\\"bottom\\\">Hello!</Popover>\\n\\t</PopoverManager>\\n\\t<PopoverManager  onFocusAway={() => setState({ isOpen: false })}>\\n\\t\\t<PopoverReference>\\n\\t\\t\\t<Button variant=\\\"primary\\\" size=\\\"medium\\\" onClick={() => setState({ isOpen: !state.isOpen })}>Show a Popover!</Button>\\n\\t\\t</PopoverReference>\\n\\t\\t<Popover isOpen={state.isOpen} placement=\\\"left\\\">Hello!</Popover>\\n\\t</PopoverManager>\\n\\t<PopoverManager onFocusAway={() => setState({ isOpen: false })}>\\n\\t\\t<PopoverReference>\\n\\t\\t\\t<Button variant=\\\"primary\\\" size=\\\"medium\\\" onClick={() => setState({ isOpen: !state.isOpen })}>Show a Popover!</Button>\\n\\t\\t</PopoverReference>\\n\\t\\t<Popover isOpen={state.isOpen} placement=\\\"right\\\">Hello!</Popover>\\n\\t</PopoverManager>\\n</PopoverDemo>\\n```\\n\\n## Options\\n\\n```react\\nshowSource: true\\nstate: { isOpen: false }\\n---\\n<PopoverDemo>\\n\\t<PopoverManager onFocusAway={() => setState({ isOpen: false })}>\\n\\t\\t<PopoverReference>\\n\\t\\t\\t<Button variant=\\\"primary\\\" size=\\\"medium\\\" onClick={() => setState({ isOpen: !state.isOpen })}>Show a Popover!</Button>\\n\\t\\t</PopoverReference>\\n\\t\\t<Popover isOpen={state.isOpen} placement=\\\"top\\\" theme={{ backgroundColor: '#ebf7ff' }}>Hello!</Popover>\\n\\t</PopoverManager>\\n\\t<PopoverManager onFocusAway={() => setState({ isOpen: false })}>\\n\\t\\t<PopoverReference>\\n\\t\\t\\t<Button variant=\\\"primary\\\" size=\\\"medium\\\" onClick={() => setState({ isOpen: !state.isOpen })}>Show a Popover with zIndex!</Button>\\n\\t\\t</PopoverReference>\\n\\t\\t<Popover isOpen={state.isOpen} placement=\\\"top\\\" styleOverrides={{ padding: '18px', hideShadow: true, width: '200px', border: 'black solid 1px', zIndex: 10 }}>Hello!</Popover>\\n\\t</PopoverManager>\\n\\t<PopoverManager onFocusAway={() => setState({ isOpen: false })}>\\n\\t\\t<PopoverReference>\\n\\t\\t\\t<Button variant=\\\"primary\\\" size=\\\"medium\\\" onClick={() => setState({ isOpen: !state.isOpen })}>Show a Popover!</Button>\\n\\t\\t</PopoverReference>\\n\\t\\t<Popover isOpen={state.isOpen} placement=\\\"top\\\" hideArrow>Hello!</Popover>\\n\\t</PopoverManager>\\n\\t<PopoverManager onFocusAway={() => setState({ isOpen: false })}>\\n\\t\\t<PopoverReference>\\n\\t\\t\\t<Button variant=\\\"primary\\\" size=\\\"medium\\\" onClick={() => setState({ isOpen: !state.isOpen })}>Show a Popover w/ a delay!</Button>\\n\\t\\t</PopoverReference>\\n\\t\\t<Popover isOpen={state.isOpen} placement=\\\"top\\\" delay={{ show: 1000, hide: 1000 }}>Hello!</Popover>\\n\\t</PopoverManager>\\n</PopoverDemo>\\n```\\n\\n## Using container prop\\n\\n```react\\nshowSource: true\\nstate: { isOpen: false }\\n---\\n// overflow: hidden\\n<PopoverOverflowDemo>\\n\\t<PopoverManager onFocusAway={() => setState({ isOpen: false })}>\\n\\t\\t<PopoverReference>\\n\\t\\t\\t<Button variant=\\\"primary\\\" size=\\\"medium\\\" onClick={() => setState({ isOpen: !state.isOpen })}>Show a Popover!</Button>\\n\\t\\t</PopoverReference>\\n\\t\\t<Popover isOpen={state.isOpen} placement=\\\"top\\\">I'm inline</Popover>\\n\\t</PopoverManager>\\n\\t<PopoverManager onFocusAway={() => setState({ isOpen: false })}>\\n\\t\\t<PopoverReference>\\n\\t\\t\\t<Button variant=\\\"primary\\\" size=\\\"medium\\\" onClick={() => setState({ isOpen: !state.isOpen })}>Show a Popover!</Button>\\n\\t\\t</PopoverReference>\\n\\t\\t<Popover isOpen={state.isOpen} placement=\\\"top\\\" container=\\\"body\\\">I'm thinking with portals!</Popover>\\n\\t</PopoverManager>\\n</PopoverOverflowDemo>\\n```\\n\\n## Tooltip\\n\\nAll props for normal popovers are available to tooltips.\\nTooltips will be hidden on mobile.\\n\\n```react\\nshowSource: true\\nstate: { isOpen: false }\\n---\\n<PopoverDemo>\\n\\t<Tooltip content=\\\"Hello!\\\">\\n\\t\\t<Button variant=\\\"primary\\\" size=\\\"medium\\\">Uncontrolled Tooltip</Button>\\n\\t</Tooltip>\\n\\n\\t<Tooltip content=\\\"Hello!\\\" isOpen={state.isOpen}>\\n\\t\\t<Button variant=\\\"primary\\\" size=\\\"medium\\\" onClick={() => setState({ isOpen: !state.isOpen })}>Controlled Tooltip</Button>\\n\\t</Tooltip>\\n\\n\\t<Tooltip content={<StyledDiv>Hello!</StyledDiv>}>\\n\\t\\t<Button variant=\\\"primary\\\" size=\\\"medium\\\">Tooltip with jsx</Button>\\n\\t</Tooltip>\\n</PopoverDemo>\\n```\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./catalog/popover/variations.md\n// module id = 2151\n// module chunks = 16"],"sourceRoot":""}