webpackJsonp([39],{2028:function(t,e,n){var a=n(0),i=n(90),l=n(445).PageRenderer;l.__esModule&&(l=l.default);var o=i({displayName:"WrappedPageRenderer",getInitialState:function(){return{content:n(2132)}},componentWillMount:function(){},render:function(){return a.createElement(l,Object.assign({},this.props,{content:this.state.content}))}});o.__catalog_loader__=!0,t.exports=o},2132:function(t,e){t.exports='Usage examples\n\n### Row ID\n\nAll data must include an `id` property or `handleGetRowId` must be provided\n\n```react\nshowSource: true\nstate: { data: null }\n---\n<div>\n\t<Button primary medium onClick={() => setState({ data: (state.data && state.data.slice(50)) || censusData.slice(50) })}>Update Data</Button>\n\t<SimpleGrid data={state.data || censusData} maxRows={10} handleGetRowId={data => data.NAME}>\n\t\t<GridColumn displayName="Name" fieldName="value" defaultSort={GridColumn.sortOptions.ascending} />\n\t\t<GridColumn displayName="Population" fieldName="population" isRightAligned />\n\t\t<GridColumn displayName="Net Population Change" fieldName="populationChange" isRightAligned />\n\t\t<GridColumn displayName="Births" fieldName="births" isRightAligned width={100} isLargeViewportOnly />\n\t\t<GridColumn displayName="Deaths" fieldName="deaths" isRightAligned width={100} isSortable={false} isLargeViewportOnly/>\n\t</SimpleGrid>\n</div>\n```\n\n### Interactable Elements in the rows\n\nThe `hasInteractableElement` allows you to use interactable in rows without triggering a row click\n\n```react\nshowSource: true\n---\n<div>\n\t<SimpleGrid data={censusData} maxRows={10} onRowClick={() => alert(\'Click\')}>\n\t\t<GridColumn displayName="Name" fieldName="value" defaultSort={GridColumn.sortOptions.ascending} />\n\t\t<GridColumn displayName="Population" fieldName="population" isRightAligned />\n\t\t<GridColumn displayName="Net Population Change" fieldName="populationChange" isRightAligned />\n\t\t<GridColumn\n\t\t\thasInteractableElement\n\t\t\tdisplayName=""\n\t\t\tfieldName="edit"\n\t\t\twidth={100}\n\t\t\tcellComponent={ ({data}) =>\n\t\t\t\t(<Button primary small onClick={() => console.log(data)}>\n\t\t\t\t\tEdit\n\t\t\t\t</Button>)\n\t\t\t}\n\t\t\tisLargeViewportOnly\n\t\t/>\n\t</SimpleGrid>\n</div>\n```\n\n### Simple Aggregations\n\n```react\nshowSource: true\n---\n<div>\n\t<SimpleGrid data={censusData} maxRows={10}>\n\t\t<GridColumn displayName="Area Description" fieldName="areaDesc" groupByColumn width={200} />\n\t\t<GridColumn displayName="Name" fieldName="value" defaultSort={GridColumn.sortOptions.ascending} />\n\t\t<GridColumn displayName="Population" fieldName="population" />\n\t\t<GridColumn displayName="Net Population Change" fieldName="populationChange" />\n\t</SimpleGrid>\n</div>\n```\n\n### Simple Text Filtering\n\n```react\nshowSource: true\nstate: { filterText: \'WA\' }\n---\n<div>\n\t<Input placeholder="Search" value={state.filterText} onChange={(e => setState({ filterText: e.target.value }))} />\n\t<SimpleGrid data={censusData} maxRows={10} onRowClick={row => {alert(row[0].NAME)}} filterText={state.filterText}>\n\t\t<GridColumn displayName="Name" fieldName="value" defaultSort={GridColumn.sortOptions.ascending} />\n\t\t<GridColumn displayName="Population" fieldName="population" isRightAligned />\n\t\t<GridColumn displayName="Net Population Change" fieldName="populationChange" isRightAligned />\n\t\t<GridColumn displayName="Births" fieldName="births" isRightAligned width={100} isLargeViewportOnly />\n\t\t<GridColumn displayName="Deaths" fieldName="deaths" isRightAligned width={100} isSortable={false} isLargeViewportOnly/>\n\t</SimpleGrid>\n</div>\n```\n\n### Custom Cell Component\n\nCell components can be any valid react component. The `value` prop will be what the value of the field would be normally.\n\n```react\nshowSource: true\n---\n<div>\n\t<SimpleGrid data={censusData} maxRows={10} onRowClick={row => {alert(row[0].NAME)}}>\n\t\t<GridColumn displayName="Name" fieldName="value" defaultSort={GridColumn.sortOptions.ascending} />\n\t\t<GridColumn displayName="Population" fieldName="population" isRightAligned />\n\t\t<GridColumn displayName="Net Population Change" fieldName="populationChange" cellComponent={PopulationChange} isRightAligned />\n\t\t<GridColumn displayName="Births" fieldName="births" isRightAligned width={100} isLargeViewportOnly />\n\t\t<GridColumn displayName="Deaths" fieldName="deaths" isRightAligned width={100} isSortable={false} isLargeViewportOnly/>\n\t</SimpleGrid>\n</div>\n```\n\n```code\nlang: js\n---\nfunction PopulationChange({ value }) {\n\treturn (\n\t\t<div style={{ color: value >= 0 ? \'green\' : \'red\' }}>\n\t\t\t{`${value >= 0 ? \'+\' : \'-\'} ${Math.abs(value)}`}\n\t\t</div>\n\t);\n}\n```\n'}});
//# sourceMappingURL=39.f1d5c905.chunk.js.map