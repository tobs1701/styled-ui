{"version":3,"sources":["webpack:///static/39.f1d5c905.chunk.js","webpack:///./catalog/grid/examples.md?b963","webpack:///./catalog/grid/examples.md"],"names":["webpackJsonp","2028","module","exports","__webpack_require__","React","createReactClass","PageRenderer","__esModule","default","WrappedPageRenderer","displayName","getInitialState","content","componentWillMount","render","createElement","Object","assign","this","props","state","__catalog_loader__","2132"],"mappings":"AAAAA,cAAc,KAERC,KACA,SAAUC,EAAQC,EAASC,GCFjC,GAAAC,GAAAD,EAAA,GACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,KAAAG,YACAA,GAAAC,aACAD,IAAAE,QAEA,IAAAC,GAAAJ,GACAK,YAAA,sBACAC,gBAAA,WACA,OAAgBC,QAAAT,EAAA,QAEhBU,mBAAA,aAUAC,OAAA,WACA,MAAAV,GAAAW,cAAAT,EAAAU,OAAAC,UAAiEC,KAAAC,OAAeP,QAAAM,KAAAE,MAAAR,aAGhFH,GAAAY,oBAAA,EACApB,EAAAC,QAAAO,GDUMa,KACA,SAAUrB,EAAQC,GEtCxBD,EAAAC,QAAA","file":"static/39.f1d5c905.chunk.js","sourcesContent":["webpackJsonp([39],{\n\n/***/ 2028:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    var React = __webpack_require__(0);\n    var createReactClass = __webpack_require__(90);\n    var PageRenderer = __webpack_require__(445).PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: __webpack_require__(2132)};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (false) {\n          module.hot.accept(\"!!../../node_modules/raw-loader/index.js!./examples.md\", function() {\n            component.setState({\n              content: require(\"!!../../node_modules/raw-loader/index.js!./examples.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n/***/ }),\n\n/***/ 2132:\n/***/ (function(module, exports) {\n\nmodule.exports = \"Usage examples\\n\\n### Row ID\\n\\nAll data must include an `id` property or `handleGetRowId` must be provided\\n\\n```react\\nshowSource: true\\nstate: { data: null }\\n---\\n<div>\\n\\t<Button primary medium onClick={() => setState({ data: (state.data && state.data.slice(50)) || censusData.slice(50) })}>Update Data</Button>\\n\\t<SimpleGrid data={state.data || censusData} maxRows={10} handleGetRowId={data => data.NAME}>\\n\\t\\t<GridColumn displayName=\\\"Name\\\" fieldName=\\\"value\\\" defaultSort={GridColumn.sortOptions.ascending} />\\n\\t\\t<GridColumn displayName=\\\"Population\\\" fieldName=\\\"population\\\" isRightAligned />\\n\\t\\t<GridColumn displayName=\\\"Net Population Change\\\" fieldName=\\\"populationChange\\\" isRightAligned />\\n\\t\\t<GridColumn displayName=\\\"Births\\\" fieldName=\\\"births\\\" isRightAligned width={100} isLargeViewportOnly />\\n\\t\\t<GridColumn displayName=\\\"Deaths\\\" fieldName=\\\"deaths\\\" isRightAligned width={100} isSortable={false} isLargeViewportOnly/>\\n\\t</SimpleGrid>\\n</div>\\n```\\n\\n### Interactable Elements in the rows\\n\\nThe `hasInteractableElement` allows you to use interactable in rows without triggering a row click\\n\\n```react\\nshowSource: true\\n---\\n<div>\\n\\t<SimpleGrid data={censusData} maxRows={10} onRowClick={() => alert('Click')}>\\n\\t\\t<GridColumn displayName=\\\"Name\\\" fieldName=\\\"value\\\" defaultSort={GridColumn.sortOptions.ascending} />\\n\\t\\t<GridColumn displayName=\\\"Population\\\" fieldName=\\\"population\\\" isRightAligned />\\n\\t\\t<GridColumn displayName=\\\"Net Population Change\\\" fieldName=\\\"populationChange\\\" isRightAligned />\\n\\t\\t<GridColumn\\n\\t\\t\\thasInteractableElement\\n\\t\\t\\tdisplayName=\\\"\\\"\\n\\t\\t\\tfieldName=\\\"edit\\\"\\n\\t\\t\\twidth={100}\\n\\t\\t\\tcellComponent={ ({data}) =>\\n\\t\\t\\t\\t(<Button primary small onClick={() => console.log(data)}>\\n\\t\\t\\t\\t\\tEdit\\n\\t\\t\\t\\t</Button>)\\n\\t\\t\\t}\\n\\t\\t\\tisLargeViewportOnly\\n\\t\\t/>\\n\\t</SimpleGrid>\\n</div>\\n```\\n\\n### Simple Aggregations\\n\\n```react\\nshowSource: true\\n---\\n<div>\\n\\t<SimpleGrid data={censusData} maxRows={10}>\\n\\t\\t<GridColumn displayName=\\\"Area Description\\\" fieldName=\\\"areaDesc\\\" groupByColumn width={200} />\\n\\t\\t<GridColumn displayName=\\\"Name\\\" fieldName=\\\"value\\\" defaultSort={GridColumn.sortOptions.ascending} />\\n\\t\\t<GridColumn displayName=\\\"Population\\\" fieldName=\\\"population\\\" />\\n\\t\\t<GridColumn displayName=\\\"Net Population Change\\\" fieldName=\\\"populationChange\\\" />\\n\\t</SimpleGrid>\\n</div>\\n```\\n\\n### Simple Text Filtering\\n\\n```react\\nshowSource: true\\nstate: { filterText: 'WA' }\\n---\\n<div>\\n\\t<Input placeholder=\\\"Search\\\" value={state.filterText} onChange={(e => setState({ filterText: e.target.value }))} />\\n\\t<SimpleGrid data={censusData} maxRows={10} onRowClick={row => {alert(row[0].NAME)}} filterText={state.filterText}>\\n\\t\\t<GridColumn displayName=\\\"Name\\\" fieldName=\\\"value\\\" defaultSort={GridColumn.sortOptions.ascending} />\\n\\t\\t<GridColumn displayName=\\\"Population\\\" fieldName=\\\"population\\\" isRightAligned />\\n\\t\\t<GridColumn displayName=\\\"Net Population Change\\\" fieldName=\\\"populationChange\\\" isRightAligned />\\n\\t\\t<GridColumn displayName=\\\"Births\\\" fieldName=\\\"births\\\" isRightAligned width={100} isLargeViewportOnly />\\n\\t\\t<GridColumn displayName=\\\"Deaths\\\" fieldName=\\\"deaths\\\" isRightAligned width={100} isSortable={false} isLargeViewportOnly/>\\n\\t</SimpleGrid>\\n</div>\\n```\\n\\n### Custom Cell Component\\n\\nCell components can be any valid react component. The `value` prop will be what the value of the field would be normally.\\n\\n```react\\nshowSource: true\\n---\\n<div>\\n\\t<SimpleGrid data={censusData} maxRows={10} onRowClick={row => {alert(row[0].NAME)}}>\\n\\t\\t<GridColumn displayName=\\\"Name\\\" fieldName=\\\"value\\\" defaultSort={GridColumn.sortOptions.ascending} />\\n\\t\\t<GridColumn displayName=\\\"Population\\\" fieldName=\\\"population\\\" isRightAligned />\\n\\t\\t<GridColumn displayName=\\\"Net Population Change\\\" fieldName=\\\"populationChange\\\" cellComponent={PopulationChange} isRightAligned />\\n\\t\\t<GridColumn displayName=\\\"Births\\\" fieldName=\\\"births\\\" isRightAligned width={100} isLargeViewportOnly />\\n\\t\\t<GridColumn displayName=\\\"Deaths\\\" fieldName=\\\"deaths\\\" isRightAligned width={100} isSortable={false} isLargeViewportOnly/>\\n\\t</SimpleGrid>\\n</div>\\n```\\n\\n```code\\nlang: js\\n---\\nfunction PopulationChange({ value }) {\\n\\treturn (\\n\\t\\t<div style={{ color: value >= 0 ? 'green' : 'red' }}>\\n\\t\\t\\t{`${value >= 0 ? '+' : '-'} ${Math.abs(value)}`}\\n\\t\\t</div>\\n\\t);\\n}\\n```\\n\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/39.f1d5c905.chunk.js","\n    var React = require('react');\n    var createReactClass = require('create-react-class');\n    var PageRenderer = require('catalog').PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: require(\"!!../../node_modules/raw-loader/index.js!./examples.md\")};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (module.hot) {\n          module.hot.accept(\"!!../../node_modules/raw-loader/index.js!./examples.md\", function() {\n            component.setState({\n              content: require(\"!!../../node_modules/raw-loader/index.js!./examples.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./catalog/grid/examples.md\n// module id = 2028\n// module chunks = 39","module.exports = \"Usage examples\\n\\n### Row ID\\n\\nAll data must include an `id` property or `handleGetRowId` must be provided\\n\\n```react\\nshowSource: true\\nstate: { data: null }\\n---\\n<div>\\n\\t<Button primary medium onClick={() => setState({ data: (state.data && state.data.slice(50)) || censusData.slice(50) })}>Update Data</Button>\\n\\t<SimpleGrid data={state.data || censusData} maxRows={10} handleGetRowId={data => data.NAME}>\\n\\t\\t<GridColumn displayName=\\\"Name\\\" fieldName=\\\"value\\\" defaultSort={GridColumn.sortOptions.ascending} />\\n\\t\\t<GridColumn displayName=\\\"Population\\\" fieldName=\\\"population\\\" isRightAligned />\\n\\t\\t<GridColumn displayName=\\\"Net Population Change\\\" fieldName=\\\"populationChange\\\" isRightAligned />\\n\\t\\t<GridColumn displayName=\\\"Births\\\" fieldName=\\\"births\\\" isRightAligned width={100} isLargeViewportOnly />\\n\\t\\t<GridColumn displayName=\\\"Deaths\\\" fieldName=\\\"deaths\\\" isRightAligned width={100} isSortable={false} isLargeViewportOnly/>\\n\\t</SimpleGrid>\\n</div>\\n```\\n\\n### Interactable Elements in the rows\\n\\nThe `hasInteractableElement` allows you to use interactable in rows without triggering a row click\\n\\n```react\\nshowSource: true\\n---\\n<div>\\n\\t<SimpleGrid data={censusData} maxRows={10} onRowClick={() => alert('Click')}>\\n\\t\\t<GridColumn displayName=\\\"Name\\\" fieldName=\\\"value\\\" defaultSort={GridColumn.sortOptions.ascending} />\\n\\t\\t<GridColumn displayName=\\\"Population\\\" fieldName=\\\"population\\\" isRightAligned />\\n\\t\\t<GridColumn displayName=\\\"Net Population Change\\\" fieldName=\\\"populationChange\\\" isRightAligned />\\n\\t\\t<GridColumn\\n\\t\\t\\thasInteractableElement\\n\\t\\t\\tdisplayName=\\\"\\\"\\n\\t\\t\\tfieldName=\\\"edit\\\"\\n\\t\\t\\twidth={100}\\n\\t\\t\\tcellComponent={ ({data}) =>\\n\\t\\t\\t\\t(<Button primary small onClick={() => console.log(data)}>\\n\\t\\t\\t\\t\\tEdit\\n\\t\\t\\t\\t</Button>)\\n\\t\\t\\t}\\n\\t\\t\\tisLargeViewportOnly\\n\\t\\t/>\\n\\t</SimpleGrid>\\n</div>\\n```\\n\\n### Simple Aggregations\\n\\n```react\\nshowSource: true\\n---\\n<div>\\n\\t<SimpleGrid data={censusData} maxRows={10}>\\n\\t\\t<GridColumn displayName=\\\"Area Description\\\" fieldName=\\\"areaDesc\\\" groupByColumn width={200} />\\n\\t\\t<GridColumn displayName=\\\"Name\\\" fieldName=\\\"value\\\" defaultSort={GridColumn.sortOptions.ascending} />\\n\\t\\t<GridColumn displayName=\\\"Population\\\" fieldName=\\\"population\\\" />\\n\\t\\t<GridColumn displayName=\\\"Net Population Change\\\" fieldName=\\\"populationChange\\\" />\\n\\t</SimpleGrid>\\n</div>\\n```\\n\\n### Simple Text Filtering\\n\\n```react\\nshowSource: true\\nstate: { filterText: 'WA' }\\n---\\n<div>\\n\\t<Input placeholder=\\\"Search\\\" value={state.filterText} onChange={(e => setState({ filterText: e.target.value }))} />\\n\\t<SimpleGrid data={censusData} maxRows={10} onRowClick={row => {alert(row[0].NAME)}} filterText={state.filterText}>\\n\\t\\t<GridColumn displayName=\\\"Name\\\" fieldName=\\\"value\\\" defaultSort={GridColumn.sortOptions.ascending} />\\n\\t\\t<GridColumn displayName=\\\"Population\\\" fieldName=\\\"population\\\" isRightAligned />\\n\\t\\t<GridColumn displayName=\\\"Net Population Change\\\" fieldName=\\\"populationChange\\\" isRightAligned />\\n\\t\\t<GridColumn displayName=\\\"Births\\\" fieldName=\\\"births\\\" isRightAligned width={100} isLargeViewportOnly />\\n\\t\\t<GridColumn displayName=\\\"Deaths\\\" fieldName=\\\"deaths\\\" isRightAligned width={100} isSortable={false} isLargeViewportOnly/>\\n\\t</SimpleGrid>\\n</div>\\n```\\n\\n### Custom Cell Component\\n\\nCell components can be any valid react component. The `value` prop will be what the value of the field would be normally.\\n\\n```react\\nshowSource: true\\n---\\n<div>\\n\\t<SimpleGrid data={censusData} maxRows={10} onRowClick={row => {alert(row[0].NAME)}}>\\n\\t\\t<GridColumn displayName=\\\"Name\\\" fieldName=\\\"value\\\" defaultSort={GridColumn.sortOptions.ascending} />\\n\\t\\t<GridColumn displayName=\\\"Population\\\" fieldName=\\\"population\\\" isRightAligned />\\n\\t\\t<GridColumn displayName=\\\"Net Population Change\\\" fieldName=\\\"populationChange\\\" cellComponent={PopulationChange} isRightAligned />\\n\\t\\t<GridColumn displayName=\\\"Births\\\" fieldName=\\\"births\\\" isRightAligned width={100} isLargeViewportOnly />\\n\\t\\t<GridColumn displayName=\\\"Deaths\\\" fieldName=\\\"deaths\\\" isRightAligned width={100} isSortable={false} isLargeViewportOnly/>\\n\\t</SimpleGrid>\\n</div>\\n```\\n\\n```code\\nlang: js\\n---\\nfunction PopulationChange({ value }) {\\n\\treturn (\\n\\t\\t<div style={{ color: value >= 0 ? 'green' : 'red' }}>\\n\\t\\t\\t{`${value >= 0 ? '+' : '-'} ${Math.abs(value)}`}\\n\\t\\t</div>\\n\\t);\\n}\\n```\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./catalog/grid/examples.md\n// module id = 2132\n// module chunks = 39"],"sourceRoot":""}